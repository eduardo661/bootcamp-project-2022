{"ast":null,"code":"var _jsxFileName = \"/Users/edhuezo-lopez/Desktop/hack4impact/bootcamp-project-2022/src/components/RecipePage.tsx\",\n  _s = $RefreshSig$();\nimport './recipePage.css';\nimport { useParams } from \"react-router-dom\";\nimport recipes from \"../recipeData\";\nimport React, { useState } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecipePage() {\n  _s();\n  const [newIngredient, setNewIngredient] = useState('');\n  const {\n    id\n  } = useParams();\n\n  //finally found a way to deal with all of these annoying undefined issues,\n  //we can use type scripts non null assertion operator to state that a value will never\n  //be null, only use this when you know that what you are looking for will exist!\n  let target = recipes.find(element => element.name == id);\n\n  //i have no idea why, but the ? automatically appeared\n  //seems useful since it helps deal with vscode errors due to the value possibly being undefined\n\n  const [allIngredients, setAllIngredients] = useState(target.ingredients);\n  console.log(\"new ingredients: \", newIngredient);\n  console.log(\"all ingredients: \", allIngredients);\n  if (target == undefined) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"error!\"\n    }, void 0, false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title2\",\n        children: target.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"card-img\",\n          src: target.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"card-text\",\n          children: target.ingredients.map(function (name, index) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preparations-title\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Steps\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"card-text\",\n        children: [allIngredients.map(function (name, index) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 36\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"input\", {\n          //placeholder is the default value that shows up \n          placeholder: \"3 cups of mystery juice\"\n          //the value that is inputted will be stored in value, im guessing value is a variable associated with the <input> tag\n          ,\n          value: newIngredient\n          //onChange keeps track of when input tags are updated/interacted with \n          ,\n          onChange: e => {\n            setNewIngredient(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onChange: () => setAllIngredients([...allIngredients, newIngredient]),\n          children: \"Add Ingredient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(RecipePage, \"UFELyoLvNK4n5jN2Cl/oRzYyxV4=\", false, function () {\n  return [useParams];\n});\n_c = RecipePage;\nvar _c;\n$RefreshReg$(_c, \"RecipePage\");","map":{"version":3,"names":["useParams","recipes","React","useState","RecipePage","newIngredient","setNewIngredient","id","target","find","element","name","allIngredients","setAllIngredients","ingredients","console","log","undefined","image","map","index","e","value"],"sources":["/Users/edhuezo-lopez/Desktop/hack4impact/bootcamp-project-2022/src/components/RecipePage.tsx"],"sourcesContent":["import {Recipe} from \"../recipeData\"\nimport './recipePage.css'\nimport { useParams } from \"react-router-dom\";\nimport recipes from \"../recipeData\";\nimport React, { ChangeEvent, useState } from 'react';\n\n\n\nexport default function RecipePage(){\n\n    const [newIngredient, setNewIngredient] = useState('');\n\n    const { id } = useParams();\n\n    //finally found a way to deal with all of these annoying undefined issues,\n    //we can use type scripts non null assertion operator to state that a value will never\n    //be null, only use this when you know that what you are looking for will exist!\n    let target = recipes.find(element => (element.name == id))!;\n\n    //i have no idea why, but the ? automatically appeared\n    //seems useful since it helps deal with vscode errors due to the value possibly being undefined\n\n    const [allIngredients, setAllIngredients] = useState(target.ingredients);\n\n\n    console.log(\"new ingredients: \", newIngredient);\n    console.log(\"all ingredients: \", allIngredients);\n\n    if(target == undefined){return (<>error!</>)}\n\n    \n    return(\n\n        <main>\n\n        <div className=\"card\">\n       \n            <h1 className=\"title2\">{target.name  }</h1>\n\n            <div className=\"card-body\">\n\n                <img className=\"card-img\" src={target.image} /> \n\n                <ul className=\"card-text\"> \n                \n\n                 {target.ingredients.map(function(name, index) {\n                return <li key={index}>{name}</li>;\n                    })}\n\n                </ul>\n            </div>\n        </div>\n\n        <div className=\"card\">\n\n            <div className=\"preparations-title\"> \n\n            <p>Steps</p>\n\n                       \n            </div>\n\n                         {/* was prepartions-body but couldnt find that in my original style sheet {*/}\n\n                    \n            <ol className =\"card-text\">\n\n                        {allIngredients.map(function(name, index) {\n                            return <li key={index}>{name}</li>;\n                        })}\n\n\n                        <input\n                            //placeholder is the default value that shows up \n                            placeholder = \"3 cups of mystery juice\"\n                            //the value that is inputted will be stored in value, im guessing value is a variable associated with the <input> tag\n                            value = {newIngredient}\n                            //onChange keeps track of when input tags are updated/interacted with \n                            onChange={(e: ChangeEvent<HTMLInputElement>)  => {\n                                setNewIngredient(e.target.value);\n                            \n                            }}\n                            />\n\n                            \n                            <button onChange= {() => setAllIngredients([...allIngredients, newIngredient])}>\n                            Add Ingredient\n                            </button>\n\n            </ol>\n            \n\n            </div>\n\n            </main>\n\n        \n        \n            \n        \n                    \n\n    )\n}\n\n\n\n"],"mappings":";;AACA,OAAO,kBAAkB;AACzB,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,KAAK,IAAiBC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAIrD,eAAe,SAASC,UAAU,GAAE;EAAA;EAEhC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAM;IAAEI;EAAG,CAAC,GAAGP,SAAS,EAAE;;EAE1B;EACA;EACA;EACA,IAAIQ,MAAM,GAAGP,OAAO,CAACQ,IAAI,CAACC,OAAO,IAAKA,OAAO,CAACC,IAAI,IAAIJ,EAAG,CAAE;;EAE3D;EACA;;EAEA,MAAM,CAACK,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAACK,MAAM,CAACM,WAAW,CAAC;EAGxEC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEX,aAAa,CAAC;EAC/CU,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEJ,cAAc,CAAC;EAEhD,IAAGJ,MAAM,IAAIS,SAAS,EAAC;IAAC,oBAAQ;MAAA;IAAA,iBAAW;EAAC;EAG5C,oBAEI;IAAA,wBAEA;MAAK,SAAS,EAAC,MAAM;MAAA,wBAEjB;QAAI,SAAS,EAAC,QAAQ;QAAA,UAAET,MAAM,CAACG;MAAI;QAAA;QAAA;QAAA;MAAA,QAAQ,eAE3C;QAAK,SAAS,EAAC,WAAW;QAAA,wBAEtB;UAAK,SAAS,EAAC,UAAU;UAAC,GAAG,EAAEH,MAAM,CAACU;QAAM;UAAA;UAAA;UAAA;QAAA,QAAG,eAE/C;UAAI,SAAS,EAAC,WAAW;UAAA,UAGvBV,MAAM,CAACM,WAAW,CAACK,GAAG,CAAC,UAASR,IAAI,EAAES,KAAK,EAAE;YAC/C,oBAAO;cAAA,UAAiBT;YAAI,GAAZS,KAAK;cAAA;cAAA;cAAA;YAAA,QAAa;UAC9B,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QAED;MAAA;QAAA;QAAA;QAAA;MAAA,QACH;IAAA;MAAA;MAAA;MAAA;IAAA,QACJ,eAEN;MAAK,SAAS,EAAC,MAAM;MAAA,wBAEjB;QAAK,SAAS,EAAC,oBAAoB;QAAA,uBAEnC;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAY;QAAA;QAAA;QAAA;MAAA,QAGN,eAKN;QAAI,SAAS,EAAE,WAAW;QAAA,WAEbR,cAAc,CAACO,GAAG,CAAC,UAASR,IAAI,EAAES,KAAK,EAAE;UACtC,oBAAO;YAAA,UAAiBT;UAAI,GAAZS,KAAK;YAAA;YAAA;YAAA;UAAA,QAAa;QACtC,CAAC,CAAC,eAGF;UACI;UACA,WAAW,EAAG;UACd;UAAA;UACA,KAAK,EAAIf;UACT;UAAA;UACA,QAAQ,EAAGgB,CAAgC,IAAM;YAC7Cf,gBAAgB,CAACe,CAAC,CAACb,MAAM,CAACc,KAAK,CAAC;UAEpC;QAAE;UAAA;UAAA;UAAA;QAAA,QACA,eAGF;UAAQ,QAAQ,EAAG,MAAMT,iBAAiB,CAAC,CAAC,GAAGD,cAAc,EAAEP,aAAa,CAAC,CAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAEtE;MAAA;QAAA;QAAA;QAAA;MAAA,QAEpB;IAAA;MAAA;MAAA;MAAA;IAAA,QAGC;EAAA;IAAA;IAAA;IAAA;EAAA,QAEC;AASnB;AAAC,GAhGuBD,UAAU;EAAA,QAIfJ,SAAS;AAAA;AAAA,KAJJI,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}